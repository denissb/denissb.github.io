{
  "version": "https://jsonfeed.org/version/1",
  "title": "Deniss Borisovs | Web developer",
  "home_page_url": "https://denissb.github.io/",
  "feed_url": "https://denissb.github.io/feed.json",
  "description": "Web developer focused on Front-end and UI/UX development",
  "author": {
    "name": "Deniss Borisovs,",
    "url": "https://denissb.github.io/"
  },
  "items": [
    {
      "id": "https://denissb.github.io/posts/blog-update-using-lume/",
      "url": "https://denissb.github.io/posts/blog-update-using-lume/",
      "title": "Website update using Lume and Deno",
      "content_html": "<h2>Intro</h2>\n<p>Two weeks ago I decided to update my personal website as part of an endeavour to\nimprove my self-promotion. As I stared working on the things I wanted to build I\nquickly understood that most of the Jekyll plugins and custom code I used to\npreviously build the site are now largely incompatible with the new versions of\nJekyll and Ruby. As I am far from a Ruby expert I decided to move my website to\na familiar technology such as Gatsby or Next.JS as part of the process. But\nsince I have been experimenting with <a href=\"https://deno.land/\">Deno</a> and\n<a href=\"https://deno.com/deploy\">Deno Deploy</a> I decided to search for a static site\ngenerator built with Deno and my search quickly lead me to find\n<a href=\"https://lumeland.github.io/\">Lume</a>.</p>\n<h2>Why Deno and Lume</h2>\n<p>The choice of using Deno over Node.JS for something simple and light weight was\nobvious to me since in scope of my personal website I do not have any strong\nrequirements in terms of runtime maturity or having a vibrant (sometimes too\nvibrant) echosystem of packages such as the one provided by npm. Additionally\nDeno is super simple to set up and keep up to date.</p>\n<p>Lets go over some key advantages of <a href=\"https://deno.land/\">Deno</a>:</p>\n<ul>\n<li>First class TypeScript support</li>\n<li>Ability to use deno fmt instead of configuring eslint (but both are possible)</li>\n<li>No need for babel with most latest ES6 features supported out of the box,\nincluding ES6 modules and top-level async/await.</li>\n<li>A secure sandbox runtime environment which requires to explicitly set access\npermissions depending on the applications needs.</li>\n<li>Easy integration with WebAssembly and Rust modules.</li>\n</ul>\n<p>Reasons for using <a href=\"https://lumeland.github.io/\">Lume</a> for a simple static site:</p>\n<ul>\n<li>Blazing fast âš¡</li>\n<li>Works similarly to Jekyll and Gatsby but runs on Deno</li>\n<li>Supports all of the most popular file and template formats</li>\n<li>Super simple setup and configuration allowing you to enable only what you need\nfor your site.</li>\n<li>Heavily customizable using Scripts, Events, Processors, Loaders, and Plugins.</li>\n</ul>\n<p>Setting up a website with Lume was very easy, but after I looked at examples I\ndecided to use their <a href=\"https://github.com/lumeland/base-blog\">Base Blog starter</a>\nas a baseline. It was a smooth starting point with clear instructions on how to\ndeploy the site to GitHub pages using GitHub actions which is exactly what I\nwanted.</p>\n<p>I even set up a <a href=\"https://lumeland.github.io/core/events/\">simple event hook</a>\nthat allowed me to generate a <code>.pdf</code> version of my CV from it's markdown page\nusing puppeteer, so when I edit the CV page a new version of the <code>pdf</code> is\ngenerated on the fly.</p>\n<p>The source code of my website which you are currently reading can be found\n<a href=\"https://github.com/denissb/denissb.github.io\">here</a> in case you want to have a\nlook. ðŸ˜‰</p>\n<p>Happy hacking! ðŸ•Š</p>",
      "date_published": "2023-08-26T22:52:05Z"
    },
    {
      "id": "https://denissb.github.io/posts/angular-2-beta-dynamic-lazy-loading/",
      "url": "https://denissb.github.io/posts/angular-2-beta-dynamic-lazy-loading/",
      "title": "Angular 2 dynamic lazy loading",
      "content_html": "<p>I started\n<a href=\"https://github.com/spawnius/angular2-dynamic-lazy-loading\">this little experiment</a>\nwhen an idea came to my mind that Angular 2 can be used not only for single page\napplications, but also to build dynamic component based websites.</p>\n<p>What I wanted to achieve is - dynamically loaded and initialised components\nbased on the html provided in the root application component as a template. The\nidea is smiliar to projection in Angular2 but happens dynamically, without the\nneed to pre-register the routes and components in the application code. So I\nhope the name does not confuse you so much.</p>\n<p>This approach might be useful for a CMS system where editors want to specify\ncomponents on the page by simply using custom tags in a WYSIWYG editor, or apps\nthat have a large number of components that can be moved or removed from pages.</p>\n<p>My first thought was that it can be achieved on the back end side by generating\njavascript on the fly that registers components and routes. But I quickly\ndropped the idea by deciding that it's better to put apples to apples and leave\nfront end things where they are supposed to be, well... the front end. So after\na couple evenings I managed to code a\n<a href=\"https://github.com/spawnius/angular2-dynamic-lazy-loading\">PoC</a>.</p>\n<p>The Angular 2 application needs to be loaded after the promise returned by\nAsyncProviders SETUP is resolved. The SETUP method is static and accepts two\nparameters - the tag name of the application component and the path to the\ncomponents folder. The dependencies are resolved before the application code is\nloaded, and exposed to the application component as static properties on the\nAsyncProvider.</p>\n<p><a href=\"https://github.com/spawnius/angular2-dynamic-lazy-loading/blob/master/app/main.ts\">Example</a>:</p>\n<pre><code class=\"language-js\">AsyncProvider.SETUP(&quot;my-app&quot;, &quot;./app/components&quot;).then(() =&gt; {\n  // Now we are ready to initialize the app with lazy loaded components\n  System.import(&quot;./app/components/app.component&quot;).then((module) =&gt; {\n    bootstrap(module.default);\n  });\n});\n</code></pre>\n<p>During this process the following steps are performed by AsyncProvider:</p>\n<ol>\n<li>html is extracted from the body of the root component (provided in\nindex.html)</li>\n<li>The extracted html is analysed for custom tags</li>\n<li>AsyncProvider tries to load a component for each custom tag</li>\n<li>An app level route is generated for each component with the tag name of the\ncomponent as its base and capitalized name as route name</li>\n<li>The previously extracted html is used as the template to render the app and\ndefined components</li>\n<li>App gets loaded using System.import and reads a static property on\nAsyncProvider to get route, component and template definitions.</li>\n</ol>\n<p>A working example can be found in the\n<a href=\"https://github.com/spawnius/angular2-dynamic-lazy-loading\">github repo</a>.</p>\n<p>If you are interested in the idea please don't hesitate to create an issue or\npull request ^__-</p>\n<p>Thanks for visiting!</p>",
      "date_published": "2016-02-27T00:00:00Z"
    },
    {
      "id": "https://denissb.github.io/posts/angular2-beta-todo-app-ngrx/",
      "url": "https://denissb.github.io/posts/angular2-beta-todo-app-ngrx/",
      "title": "Angular 2 Todo app using ngrx and ngrx/devtools",
      "content_html": "<p>On a bored afternoon I decided it would be cool to learn how to build an\nAngular2 application using <a href=\"https://github.com/ngrx\">ngrx</a> with state tracking\nand devtool integration. A working example can be found on github for both\n<a href=\"https://github.com/spawnius/angular2-todo/tree/redux\">redux</a> and\n<a href=\"https://github.com/spawnius/angular2-todo\">basic</a> implementations.</p>\n<p>Immutability and uni-directional flow can help us build more robust, scalable\nand performant front-end applications. Not to mention it's cool to be able to\ntrack the state of your application and manipulate it on demand.</p>\n<p>A possible improvement would be to implement a branch that is more compliant\nwith <a href=\"https://en.wikipedia.org/wiki/Functional_reactive_programming\">RFP</a>.</p>\n<p>Thanks for visiting!</p>",
      "date_published": "2016-02-27T00:00:00Z"
    },
    {
      "id": "https://denissb.github.io/posts/hello-world/",
      "url": "https://denissb.github.io/posts/hello-world/",
      "title": "Hello world!",
      "content_html": "<p>I decided to upgrade my github page to Jekyll, not sure I want to commit to\nmaking blog posts but why not have the option..</p>\n<pre><code class=\"language-js\">// It's as simple as:\nconsole.log(&quot;Hello world!&quot;);\n</code></pre>",
      "date_published": "2016-02-15T00:00:00Z"
    }
  ]
}